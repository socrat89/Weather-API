{"ast":null,"code":"var _jsxFileName = \"/home/socrat/Desktop/youWeather/w-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Weather from './component/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './component/form.component.jsx'; //api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"266ee41fcb7c9137df50b0d49662e958\"; // ---------------------------------------------------------------------------\n\nclass WeatherLater extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"rest-of-today-weather\",\n      children: this.props.dataLater.slice(1, 8).map((dataLater, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"hour\",\n            children: [new Date(dataLater.dt * 1000).getHours(), \":00\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            width: \"100px\",\n            src: this.getImage(dataLater.weather[0].id),\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"temperature\",\n            children: [(dataLater.main.temp - 273.15).toFixed(2), \"\\xBAC\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n} // -----------------------------------------------------------------------\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value; //'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid='+APIkey);\n\n      if (city && country) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=` + APIkey);\n        const response = await api_call.json();\n        console.log(response);\n        this.setState({\n          // city:response.name,\n          city: response.name,\n          country: response.sys.country,\n          celsius: this.calcCelsius(response.main.temp),\n          temp_max: this.calcCelsius(response.main.temp_max),\n          temp_min: this.calcCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          humidity: response.main.humidity,\n          pressure: response.main.pressure,\n          error: false\n        });\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      humidity: undefined,\n      pressure: undefined,\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atomosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeid) {\n    switch (true) {\n      case rangeid >= 200 & rangeid <= 232:\n        return this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n\n      case rangeid >= 300 & rangeid <= 321:\n        return this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n\n      case rangeid >= 500 & rangeid <= 531:\n        return this.setState({\n          icon: this.weatherIcon.Rain\n        });\n\n      case rangeid >= 600 & rangeid <= 622:\n        return this.setState({\n          icon: this.weatherIcon.Snow\n        });\n\n      case rangeid >= 701 & rangeid <= 781:\n        return this.setState({\n          icon: this.weatherIcon.Atomosphere\n        });\n\n      case rangeid === 800:\n        return this.setState({\n          icon: this.weatherIcon.Clear\n        });\n\n      case rangeid >= 800 & rangeid <= 804:\n        return this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n\n      default:\n        return this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        loadweather: this.getWeather,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Weather, {\n        city: this.state.city,\n        country: this.state.country,\n        temp_celsius: this.state.celsius,\n        temp_max: this.state.temp_max,\n        temp_min: this.state.temp_min,\n        description: this.state.description,\n        weatherIcon: this.state.icon,\n        humidity: this.state.humidity,\n        pressure: this.state.pressure\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/socrat/Desktop/youWeather/w-app/src/App.js"],"names":["React","Component","Weather","Form","APIkey","WeatherLater","render","props","dataLater","slice","map","index","Date","dt","getHours","getImage","weather","id","main","temp","toFixed","App","constructor","getWeather","e","preventDefault","city","target","elements","value","country","api_call","fetch","response","json","console","log","setState","name","sys","celsius","calcCelsius","temp_max","temp_min","description","humidity","pressure","error","get_WeatherIcon","weatherIcon","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atomosphere","Clear","Clouds","cell","Math","floor","icons","rangeid"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './component/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './component/form.component.jsx';\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst APIkey=\"266ee41fcb7c9137df50b0d49662e958\";\n// ---------------------------------------------------------------------------\nclass WeatherLater extends Component {\n  render() {\n    return (\n      <section className=\"rest-of-today-weather\">\n        {this.props.dataLater.slice(1, 8).map((dataLater, index) => {\n          return (\n            <div>\n              <p className=\"hour\">{new Date(dataLater.dt * 1000).getHours()}:00</p>\n              <img width=\"100px\" src={this.getImage(dataLater.weather[0].id)} alt=\"\" />\n              <p className=\"temperature\">{(dataLater.main.temp - 273.15).toFixed(2)}ºC</p>\n            </div>\n          )\n        })}\n      </section>\n    );\n      }}\n// -----------------------------------------------------------------------\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      humidity:undefined,\n      pressure:undefined,\n      error:false\n    };\n    \n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atomosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\ncalcCelsius(temp){\n  let cell=Math.floor(temp-273.15);\n  return cell;\n}\n\nget_WeatherIcon(icons,rangeid){\n  switch(true){\n    case rangeid>=200&rangeid<=232:\n      return this.setState({icon:this.weatherIcon.Thunderstorm});\n      \n      case rangeid>=300&rangeid<=321:\n      return this.setState({icon:this.weatherIcon.Drizzle});\n      \n       case rangeid>=500&rangeid<=531:\n        return this.setState({icon:this.weatherIcon.Rain});\n  \n       case rangeid>=600&rangeid<=622:\n        return this.setState({icon:this.weatherIcon.Snow});\n      \n       case rangeid>=701&rangeid<=781:\n        return this.setState({icon:this.weatherIcon.Atomosphere});\n      \n       case rangeid===800:\n        return this.setState({icon:this.weatherIcon.Clear});\n      \n       case rangeid>=800&rangeid<=804:\n        return this.setState({icon:this.weatherIcon.Clouds});\n    \n      default:\n        return this.setState({icon:this.weatherIcon.Clouds});\n  }\n}\n\n  getWeather=async(e)=>{\n    e.preventDefault();\n\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    //'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid='+APIkey);\n    if(city && country)\n    {\n    const api_call= await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=`+APIkey);\n    const response=await api_call.json();\n    console.log(response);\n    this.setState({\n      // city:response.name,\n      city:response.name,\n      country:response.sys.country,\n      celsius:this.calcCelsius(response.main.temp),\n      temp_max:this.calcCelsius(response.main.temp_max),\n      temp_min:this.calcCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      humidity:response.main.humidity,\n      pressure:response.main.pressure,\n      error:false\n      \n    });\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }else{\n    this.setState({error:true})\n  }\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        humidity={this.state.humidity}\n        pressure={this.state.pressure}\n        \n\n        />\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}