{"ast":null,"code":"var _jsxFileName = \"/home/socrat/Desktop/youWeather/w-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Weather from './component/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './component/form.component.jsx';\nimport Hourlyweather from './component/hourlyweather'; //api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIkey = \"266ee41fcb7c9137df50b0d49662e958\"; // ---------------------------------------------------------------------------\n// -----------------------------------------------------------------------\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value; //const country=e.target.elements.country.value;\n      //'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid='+APIkey);\n\n      if (city) {\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=` + APIkey);\n        const response = await api_call.json();\n        console.log(\"hasan\", response.list);\n        console.log(response);\n        this.setState({\n          // city:response.name,\n          city: response.name,\n          //country:response.sys.country,\n          celsius: this.calcCelsius(response.main.temp),\n          temp_max: this.calcCelsius(response.main.temp_max),\n          temp_min: this.calcCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          humidity: response.main.humidity,\n          pressure: response.main.pressure,\n          hours: response.list,\n          error: false\n        }); // console.log(hours);\n\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        this.setState({\n          error: true\n        });\n      }\n    };\n\n    this.state = {\n      city: undefined,\n      //country:undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      humidity: undefined,\n      pressure: undefined,\n      hours: [],\n      error: false\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atomosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calcCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeid) {\n    switch (true) {\n      case rangeid >= 200 & rangeid <= 232:\n        return this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n\n      case rangeid >= 300 & rangeid <= 321:\n        return this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n\n      case rangeid >= 500 & rangeid <= 531:\n        return this.setState({\n          icon: this.weatherIcon.Rain\n        });\n\n      case rangeid >= 600 & rangeid <= 622:\n        return this.setState({\n          icon: this.weatherIcon.Snow\n        });\n\n      case rangeid >= 701 & rangeid <= 781:\n        return this.setState({\n          icon: this.weatherIcon.Atomosphere\n        });\n\n      case rangeid === 800:\n        return this.setState({\n          icon: this.weatherIcon.Clear\n        });\n\n      case rangeid >= 800 & rangeid <= 804:\n        return this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n\n      default:\n        return this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        loadweather: this.getWeather,\n        error: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Weather, {\n        city: this.state.city //country={this.state.country} \n        ,\n        temp_celsius: this.state.celsius,\n        temp_max: this.state.temp_max,\n        temp_min: this.state.temp_min,\n        description: this.state.description,\n        weatherIcon: this.state.icon,\n        humidity: this.state.humidity,\n        pressure: this.state.pressure\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this) // -----------------\n    // -----------------\n    ;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/socrat/Desktop/youWeather/w-app/src/App.js"],"names":["React","Component","Weather","Form","Hourlyweather","APIkey","App","constructor","getWeather","e","preventDefault","city","target","elements","value","api_call","fetch","response","json","console","log","list","setState","name","celsius","calcCelsius","main","temp","temp_max","temp_min","description","weather","humidity","pressure","hours","error","get_WeatherIcon","weatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atomosphere","Clear","Clouds","cell","Math","floor","icons","rangeid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './component/weather';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './component/form.component.jsx';\nimport Hourlyweather from './component/hourlyweather';\n\n\n\n//api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst APIkey=\"266ee41fcb7c9137df50b0d49662e958\";\n// ---------------------------------------------------------------------------\n\n\n// -----------------------------------------------------------------------\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      //country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      humidity:undefined,\n      pressure:undefined,\n      hours:[],\n      error:false\n    };\n    \n\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atomosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n\ncalcCelsius(temp){\n  let cell=Math.floor(temp-273.15);\n  return cell;\n}\n\nget_WeatherIcon(icons,rangeid){\n  switch(true){\n    case rangeid>=200&rangeid<=232:\n      return this.setState({icon:this.weatherIcon.Thunderstorm});\n      \n      case rangeid>=300&rangeid<=321:\n      return this.setState({icon:this.weatherIcon.Drizzle});\n      \n       case rangeid>=500&rangeid<=531:\n        return this.setState({icon:this.weatherIcon.Rain});\n  \n       case rangeid>=600&rangeid<=622:\n        return this.setState({icon:this.weatherIcon.Snow});\n      \n       case rangeid>=701&rangeid<=781:\n        return this.setState({icon:this.weatherIcon.Atomosphere});\n      \n       case rangeid===800:\n        return this.setState({icon:this.weatherIcon.Clear});\n      \n       case rangeid>=800&rangeid<=804:\n        return this.setState({icon:this.weatherIcon.Clouds});\n    \n      default:\n        return this.setState({icon:this.weatherIcon.Clouds});\n  }\n}\n\n  getWeather=async(e)=>{\n    e.preventDefault();\n\n    const city=e.target.elements.city.value;\n    //const country=e.target.elements.country.value;\n\n    //'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid='+APIkey);\n    if(city)\n    {\n    const api_call= await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=`+APIkey);\n    const response=await api_call.json();\n\n    console.log(\"hasan\",response.list)\n    console.log(response);\n    this.setState({\n      // city:response.name,\n      city:response.name,\n      //country:response.sys.country,\n      celsius:this.calcCelsius(response.main.temp),\n      temp_max:this.calcCelsius(response.main.temp_max),\n      temp_min:this.calcCelsius(response.main.temp_min),\n      description:response.weather[0].description,\n      humidity:response.main.humidity,\n      pressure:response.main.pressure,\n      hours:response.list,\n      \n      error:false\n      \n    });\n    // console.log(hours);\n    this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }else{\n    this.setState({error:true})\n  }\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error}/>\n\n        <Weather \n        city={this.state.city} \n        //country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        humidity={this.state.humidity}\n        pressure={this.state.pressure}\n        \n\n        />\n        \n        {/* <Hourlyweather \n        hours={this.state.hours}/> */}\n      </div>\n      // -----------------\n\n      // -----------------\n    );\n  }\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}